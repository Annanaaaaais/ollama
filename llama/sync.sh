#!/bin/bash

# Run in the llama directory

set -e

# TODO - once the submodule is removed, this should be set in a manifest file in the root of the tree
sha1=$(cd ../llm/llama.cpp && git rev-parse HEAD)

# Set the source directory
src_dir=$(pwd)/build/tmp_checkout

# Set the destination directory
dst_dir=$(pwd)
stg_dir=${src_dir}/ollama/llama

if [ -d ${src_dir} ]; then
  echo "Resetting existing staging checkout"
  (cd ${src_dir} &&
    git fetch --depth 1 origin ${sha1} &&
    git reset --hard ${sha1} &&
    git --no-pager log -1
  )
  rm -rf "${src_dir}/ollama/"
else
  echo "Setting up shallow clone of llama.cpp in ${src_dir}"
  mkdir -p "${src_dir}"
  (cd "${src_dir}" &&
    git init -q &&
    git remote add origin https://github.com/ggerganov/llama.cpp.git &&
    git fetch --depth 1 origin ${sha1} &&
    git checkout FETCH_HEAD  &&
    git --no-pager log -1
  )
fi


# rearrange the tree based on our desired layout
if ! [ -d ${stg_dir} ] ; then
  mkdir -p ${stg_dir}
fi

# llama.cpp
cp $src_dir/src/unicode.cpp $stg_dir/unicode.cpp
cp $src_dir/src/unicode.h $stg_dir/unicode.h
cp $src_dir/src/unicode-data.cpp $stg_dir/unicode-data.cpp
cp $src_dir/src/unicode-data.h $stg_dir/unicode-data.h
cp $src_dir/src/llama.cpp $stg_dir/llama.cpp
cp $src_dir/src/llama-impl.h $stg_dir/llama-impl.h
cp $src_dir/src/llama-vocab.cpp $stg_dir/llama-vocab.cpp
cp $src_dir/src/llama-vocab.h $stg_dir/llama-vocab.h
cp $src_dir/src/llama-grammar.cpp $stg_dir/llama-grammar.cpp
cp $src_dir/src/llama-grammar.h $stg_dir/llama-grammar.h
cp $src_dir/src/llama-sampling.cpp $stg_dir/llama-sampling.cpp
cp $src_dir/src/llama-sampling.h $stg_dir/llama-sampling.h
cp $src_dir/include/llama.h $stg_dir/llama.h
cp $src_dir/ggml/src/llamafile/sgemm.cpp $stg_dir/sgemm.cpp
mkdir -p $stg_dir/llamafile
cp $src_dir/ggml/src/llamafile/sgemm.h $stg_dir/llamafile/sgemm.h

# ggml
cp $src_dir/ggml/src/ggml.c $stg_dir/ggml.c
cp $src_dir/ggml/include/ggml.h $stg_dir/ggml.h
cp $src_dir/ggml/src/ggml-quants.c $stg_dir/ggml-quants.c
cp $src_dir/ggml/src/ggml-quants.h $stg_dir/ggml-quants.h
cp $src_dir/ggml/src/ggml-metal.metal $stg_dir/ggml-metal.metal
cp $src_dir/ggml/include/ggml-metal.h $stg_dir/ggml-metal.h
cp $src_dir/ggml/src/ggml-metal.m $stg_dir/ggml-metal_darwin_arm64.m
cp $src_dir/ggml/src/ggml-impl.h $stg_dir/ggml-impl.h
cp $src_dir/ggml/include/ggml-cuda.h $stg_dir/ggml-cuda.h
cp $src_dir/ggml/src/ggml-cuda.cu $stg_dir/ggml-cuda.cu
cp $src_dir/ggml/src/ggml-common.h $stg_dir/ggml-common.h
cp $src_dir/ggml/include/ggml-backend.h $stg_dir/ggml-backend.h
cp $src_dir/ggml/src/ggml-backend.c $stg_dir/ggml-backend.c
cp $src_dir/ggml/src/ggml-backend-impl.h $stg_dir/ggml-backend-impl.h
cp $src_dir/ggml/include/ggml-alloc.h $stg_dir/ggml-alloc.h
cp $src_dir/ggml/src/ggml-alloc.c $stg_dir/ggml-alloc.c
cp $src_dir/ggml/src/ggml-aarch64.h $stg_dir/ggml-aarch64.h
cp $src_dir/ggml/src/ggml-aarch64.c $stg_dir/ggml-aarch64.c
cp $src_dir/ggml/include/ggml-blas.h $stg_dir/ggml-blas.h
cp $src_dir/ggml/src/ggml-blas.cpp $stg_dir/ggml-blas.cpp

# ggml-cuda
mkdir -p $stg_dir/ggml-cuda/template-instances
mkdir -p $stg_dir/ggml-cuda/vendors
cp $src_dir/ggml/src/ggml-cuda/*.cu $stg_dir/ggml-cuda/
cp $src_dir/ggml/src/ggml-cuda/*.cuh $stg_dir/ggml-cuda/
cp $src_dir/ggml/src/ggml-cuda/template-instances/*.cu $stg_dir/ggml-cuda/template-instances/
cp $src_dir/ggml/src/ggml-cuda/vendors/*.h $stg_dir/ggml-cuda/vendors/

# llava
cp $src_dir/examples/llava/clip.cpp $stg_dir/clip.cpp
cp $src_dir/examples/llava/clip.h $stg_dir/clip.h
cp $src_dir/examples/llava/llava.cpp $stg_dir/llava.cpp
cp $src_dir/examples/llava/llava.h $stg_dir/llava.h
cp $src_dir/common/log.h $stg_dir/log.h
cp $src_dir/common/stb_image.h $stg_dir/stb_image.h

# These files are mostly used by the llava code
# and shouldn't be necessary once we use clip.cpp directly
cp $src_dir/common/common.cpp $stg_dir/common.cpp
cp $src_dir/common/common.h $stg_dir/common.h
cp $src_dir/common/sampling.cpp $stg_dir/sampling.cpp
cp $src_dir/common/sampling.h $stg_dir/sampling.h
cp $src_dir/common/grammar-parser.cpp $stg_dir/grammar-parser.cpp
cp $src_dir/common/grammar-parser.h $stg_dir/grammar-parser.h
cp $src_dir/common/json.hpp $stg_dir/json.hpp
cp $src_dir/common/json-schema-to-grammar.cpp $stg_dir/json-schema-to-grammar.cpp
cp $src_dir/common/json-schema-to-grammar.h $stg_dir/json-schema-to-grammar.h
cp $src_dir/common/base64.hpp $stg_dir/base64.hpp
cat <<EOF > $stg_dir/build-info.cpp
int LLAMA_BUILD_NUMBER = 0;
char const *LLAMA_COMMIT = "$sha1";
char const *LLAMA_COMPILER = "";
char const *LLAMA_BUILD_TARGET = "";
EOF


# apply patches
for patch in $dst_dir/patches/*.diff; do
  echo "Applying $patch"
  (cd "$stg_dir/.." && patch -p1 < "$patch")
done

# clean up any orig backups
find "$stg_dir" -name \*.orig | xargs rm -f

# add licenses
TEMP_LICENSE=$(mktemp)
cleanup() {
    rm -f $TEMP_LICENSE
}
trap cleanup 0

cat <<EOF | sed 's/ *$//' >$TEMP_LICENSE
/**
 * llama.cpp - commit $sha1 - do not edit this file without generating a patch
 *
$(sed 's/^/ * /' <$src_dir/LICENSE)
 */

EOF

LICENSE_FILES=$(find $stg_dir -type f \( -name "*.c" -o -name "*.h" -o -name "*.cpp" -o -name "*.m" -o -name "*.metal" -o -name "*.cu" -o -name "*.cuh" \))
EXCLUDED_FILES=("sgemm.cpp" "sgemm.h" "sampling_ext.cpp" "sampling_ext.h" "stb_image.h" "json.hpp" "llama_darwin.c")

for IN in $LICENSE_FILES; do
    for EXCLUDED in "${EXCLUDED_FILES[@]}"; do
        if [[ "$IN" == *"$EXCLUDED" ]]; then
            continue 2
        fi
    done
    TMP=$(mktemp)
    cat $TEMP_LICENSE $IN >$TMP
    mv $TMP $IN
done

# Move the files into location
echo "Moving files into location"

for IN in $(cd "${stg_dir}" && find . -type f ) ; do
  mv "${stg_dir}/$IN" "${dst_dir}/$IN"
done